name: Deploy to ECS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    name: Build & Deploy to ECS
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, Tag, and Push Docker image
      run: |
        IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest"
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    - name: Register new ECS task definition revision
      id: register-task
      run: |
        TASK_DEF_JSON=$(aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }})
        NEW_TASK_DEF=$(echo $TASK_DEF_JSON | jq \
          --arg IMAGE_URI $IMAGE_URI \
          --arg CONTAINER_NAME ${{ secrets.CONTAINER_NAME }} \
          '.taskDefinition | 
            { 
              family: .family, 
              containerDefinitions: 
                [.containerDefinitions[] | 
                  if .name == $CONTAINER_NAME 
                  then .image = $IMAGE_URI | . 
                  else . 
                  end
                ], 
              requiresCompatibilities: .requiresCompatibilities,
              networkMode: .networkMode, 
              cpu: .cpu, 
              memory: .memory, 
              executionRoleArn: .executionRoleArn, 
              taskRoleArn: .taskRoleArn 
            }')
        echo "$NEW_TASK_DEF" > new-task-def.json
        aws ecs register-task-definition --cli-input-json file://new-task-def.json

    - name: Deploy updated task to ECS
      run: |
        aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER }} \
          --service ${{ secrets.ECS_SERVICE }} \
          --force-new-deployment
